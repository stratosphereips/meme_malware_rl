import os
import random
import sys

import gym
import numpy as np
from gym import wrappers
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import VecNormalize
from stable_baselines3.common.env_util import make_vec_env

import torch as th

import malware_rl

random.seed(0)
module_path = os.path.split(os.path.abspath(sys.modules[__name__].__file__))[0]
outdir = os.path.join(module_path, "data/logs/ppo-agent-results")

# Setting up environment
env_id = "ember-train-v0"
env = make_vec_env(env_id, n_envs=4)

# Adding this wrapper to normalize the observation
env =  VecNormalize(env, norm_obs=True, norm_reward=False) 
env.seed(0)

# Setting up testing parameters and holding variables
episode_count = 200
done = False
reward = 0
evasions = 0
evasion_history = {}


# Train the agent
policy_kwargs = dict(activation_fn=th.nn.ReLU,
                     net_arch=[128, 128])

agent = PPO("MlpPolicy", 
            env, 
            gamma=0.95,
            n_epochs=20,
            verbose=1, 
            n_steps=128, 
            tensorboard_log="./ppo_ember_tensorboard/", 
            policy_kwargs=policy_kwargs, 
            device='cpu',
            ent_coef=0.05)

agent.learn(total_timesteps=25000)
agent.save("ppo-ember-train-v0")

print("[*] Evaluation phase begins")
eval_env = gym.make("ember-test-v0")
eval_env = wrappers.Monitor(eval_env, directory=outdir, force=True)

eval_env.seed(0)

# Test the agent in the eval environment
for i in range(episode_count):
    ob = eval_env.reset()
    sha256 = eval_env.sha256
    while True:
        action, _states = agent.predict(ob, reward, done)
        obs, rewards, done, ep_history = eval_env.step(action)
        if done and rewards >= 10.0:
            evasions += 1
            evasion_history[sha256] = ep_history
            break

        elif done:
            break

# Output metrics/evaluation stuff
evasion_rate = (evasions / episode_count) * 100
mean_action_count = np.mean(eval_env.get_episode_lengths())
print(f"{evasion_rate}% samples evaded model.")
print(f"Average of {mean_action_count} moves to evade model.")
print("History:", evasion_history)